
1.Using TCP/IP socket programming, implement a program to transfer the contents of a requested file from server to the client using TCP/IP sockets.
Server.c
#include <stdio.h> 
#include <arpa/inet.h> 
#include <fcntl.h> 
#include <unistd.h> 
int main() 
{ 
    int welcome, new_soc, fd, n; 
    char buffer[1024], fname[50]; 
    struct sockaddr_in addr; 

    welcome = socket(PF_INET, SOCK_STREAM, 0); 

    addr.sin_family = AF_INET; 
    addr.sin_port = htons(7891); 
    addr.sin_addr.s_addr = inet_addr("127.0.0.1"); 

    bind(welcome, (struct sockaddr *) &addr, sizeof(addr)); 
    printf("\nServer is Online"); 
    /*  listen for connections from the socket */ 
    listen(welcome, 5); 
    /*  accept a connection, we get a file descriptor */ 
    new_soc = accept(welcome, NULL, NULL); 

    /*  receive the filename */ 
    recv(new_soc, fname, 50, 0); 
    printf("\nRequesting for file: %s\n", fname); 

    /*  open the file and send its contents */ 
    fd = open(fname, O_RDONLY); 
    if (fd < 0) 
        send(new_soc, "\nFile not found\n", 15, 0); 
    else 
        while ((n = read(fd, buffer, sizeof(buffer))) > 0) 
            send(new_soc, buffer, n, 0); 
    printf("\nRequest sent\n"); 
    close(fd); 
    return 0; 

Client.c

#include <stdio.h> 
#include <arpa/inet.h> 
#include <fcntl.h> 
#include <unistd.h> 
int main() 
{ 
    int soc, n; 
    char buffer[1024], fname[50]; 
    struct sockaddr_in addr; 

    /*  socket creates an endpoint for communication and returns a file descriptor */ 
    soc = socket(PF_INET, SOCK_STREAM, 0); 

    /* 
     * sockaddr_in is used for ip manipulation 
     * we define the port and IP for the connection. 
     */ 
    addr.sin_family = AF_INET; 
    addr.sin_port = htons(7891); 
    addr.sin_addr.s_addr = inet_addr("127.0.0.1"); 

    /*  keep trying to esatablish connection with server */ 
    while(connect(soc, (struct sockaddr *) &addr, sizeof(addr))) ; 
    printf("\nClient is connected to Server"); 
    printf("\nEnter file name: "); 
    scanf("%s", fname); 
    /*  send the filename to the server */ 
    send(soc, fname, sizeof(fname), 0); 

    printf("\nRecieved response\n"); 
    /*  keep printing any data received from the server */ 
    while ((n = recv(soc, buffer, sizeof(buffer), 0)) > 0) 
        printf("%s", buffer); 

    return 0; 
}





















2. Implement the data link layer farming methods such as character, character stuffing and bit stuffing 
Character stuffing
#include<stdio.h> 
#include<string.h> 
void main() 
{ 
int i=0,j=0,n; 
char a[30],b[30]; 
printf("enter the original string\n"); 
scanf("%s",&a); 
n=strlen(a); 
b[0]='d'; 
b[1]='l'; 
b[2]='e'; 
b[3]='s'; 
b[4]='t'; 
b[5]='x'; 
j=6; 
while(i<n) 
{ 
if(a[i]=='d' && a[i+1]=='l' && a[i+2]=='e') 
{ 
b[j]='d'; 
b[j+1]='l'; 
b[j+2]='e'; 
j=j+3; 
} 
b[j]=a[i]; 
i++; 
j++; 
} 
b[j]='d'; 
b[j+1]='l'; 
b[j+2]='e'; 
b[j+3]='e'; 
b[j+4]='t'; 
b[j+5]='x'; 
b[j+6]='\0'; 
printf("\n after character stuffing:\n"); 
printf("%s",b); 
} 



Bit stuffing
#include<stdio.h> 
void main() 
{ 
int i=0,count=0; 
char a[100]; 
printf("enter the frame:"); 
scanf("%s",a); 
printf("\n after bit stuffing\n"); 
printf("01111110"); 
for(i=0;a[i];i++) 
{ 
if(a[i]=='1') 
count++; 
else 
count=0; 
printf("%c",a[i]); 
if(count==5) 
{ 
printf("0"); 
count=0; 
} 
} 
printf("01111110"); 
}



 











3. Implement on a data set of characters the three CRC polynomials â€“CRC 12, CRC 16 and CRC CCIP

#include<stdio.h> 
void main() 
{ 
int i,f[20],n[50],div[50],j,temp,quotient[20]; 
printf("enter the number"); 
for(i=0;i<8;i++) 
{ 
scanf("%d",&n[i]); 
} 
printf("enter the divisor"); 
for(i=0;i<4;i++) 
{ 
scanf("%d",&div[i]); 
} 
for(i=8;i<12;i++) 
{ 
n[i]=0; 
} 
for(i=0;i<8;i++) 
{ 
temp=i; 
if(n[i]==1) 
{ 
for(j=0;j<4;j++) 
{ 
if(n[temp]==div[j]) 
{ 
n[temp]=0; 
f[j]=0; 
} 
else 
{ 
n[temp]=1; 
f[j]=1; 
} 
temp=temp+1; 
} 
quotient[i]=1; 
} 
else 
quotient[i]=0; 
} 

printf("the quotient is \n"); 
for(i=0;i<8;i++) 

 printf("%d",quotient[i]); 

printf("\n and the remainder is \n"); 
for(j=0;j<4;j++) 
 
 printf("%d",f[j]); 

} 







4. Write a program for frame sorting technique used in buffers.
#include<stdio.h> 
struct frame{ 
int num; 
char str[20]; 
}; 
struct frame arr[10]; 
int n; 

void sort() /*Bubble sort */ 
{ 
int i,j; 
struct frame temp; 
for(i=0;i<n-1;i++) 

for(j=0;j<n-i-1;j++) 

if(arr[j].num>arr[j+1].num) 
{ temp=arr[j]; 
arr[j]=arr[j+1]; 
arr[j+1]=temp; 

} 

} 

int main() 
{ 
int i; 
system("clear"); 
printf("Enter the number of frames\n"); 
scanf("%d",&n); 
printf("Enter the frame sequence number and frame contents\n"); 
for(i=0;i<n;i++) 
scanf("%d%s",&arr[i].num,&arr[i].str); 
sort(); 
printf("The frame in sequences\n"); 
for(i=0;i<n;i++) 
printf("%d\t%s\n",arr[i].num,arr[i].str); 
} 














5. Write a program for hamming code generation for error detection and correction.
#include<stdio.h> 
 void main() { 
    int data[10]; 
    int dataatrec[10],c,c1,c2,c3,i; 
 
    printf("Enter 4 bits of data one by one\n"); 
    scanf("%d",&data[0]); 
    scanf("%d",&data[1]); 
    scanf("%d",&data[2]); 
    scanf("%d",&data[4]); 
 
    //Calculation of even parity 
    data[6]=data[0]^data[2]^data[4]; 
    data[5]=data[0]^data[1]^data[4]; 
    data[3]=data[0]^data[1]^data[2]; 
 
    printf("\nEncoded data is\n"); 
    for(i=0;i<7;i++) 
        printf("%d",data[i]); 
 
    printf("\n\nEnter received data bits one by one\n"); 
    for(i=0;i<7;i++) 
        scanf("%d",&dataatrec[i]); 
 
    c1=dataatrec[6]^dataatrec[4]^dataatrec[2]^dataatrec[0]; 
    c2=dataatrec[5]^dataatrec[4]^dataatrec[1]^dataatrec[0]; 
    c3=dataatrec[3]^dataatrec[2]^dataatrec[1]^dataatrec[0]; 
    c=c3*4+c2*2+c1; 
 
    if(c==0) { 
        printf("\nNo error while transmission of data\n"); 
    } 
    else { 
        printf("\nError on position %d",c); 
         
        printf("\nData sent : "); 
        for(i=0;i<7;i++) 
            printf("%d",data[i]); 
        
        printf("\nData received : "); 
        for(i=0;i<7;i++) 
            printf("%d",dataatrec[i]); 
         
        printf("\nCorrect message is\n"); 
 
        //if errorneous bit is 0 we complement it else vice versa 
        if(dataatrec[7-c]==0) 
            dataatrec[7-c]=1; 
        else 
            dataatrec[7-c]=0; 
         
        for (i=0;i<7;i++) { 
            printf("%d",dataatrec[i]); 
        } 
    } 
} 













6. Take an example subnet graph with weights indicating delay between nodes. Now obtain routing table at each node using distance vector routing algorithm






















7. Using Leaky bucket algorithm, Design a program to achieve traffic management at flow level by implementing closed loop control technique
#include<stdio.h> 
int main() 
{ 
int bcktsize,pkt[25],iter,rate,line,total=0,i,j; 
printf("enter the bucket size and output rate"); 
scanf("%d%d",&bcktsize,&rate); 
printf("enter the number of input lines\n"); 
scanf("%d",&line); 
printf("enter input packet rate of %d lines\n",line); 
for(i=0;i<line;i++) 
scanf("%d",&pkt[i]); 
for(j=0;j<line;j++) 
{ 
total+=pkt[j]; 
if(total<=bcktsize) 
printf("\n input from line %d with rate %d is added to the bucket\n current bucket size is %d\n",j+1,pkt[j],total); 
else 
{ 
total-=pkt[j]; 
printf("\n input from line %d with rate %d is thrown out of bucket\n current bucket size is %d\n",j+1,pkt[j],total); 
} 
} 
if(total<=rate) 
{ 
printf("packet sent to output line at rate %d",total); 
total=0; 
printf("current bucket size is %d",total); 
} 
else 
{ 
total-=rate; 
printf("\n      \n"); 
printf("\n packet sent to output line at rate %d\n current bucket size is %d\n",rate, total); 
printf("\n     \n"); 
} 
return 0; 
} 




























8. Using RSA algorithm encrypt a text data and Decrypt the same.

#include<stdio.h> 
#include<string.h> 
#include<math.h> 
int mult(unsigned int x,unsigned int y,unsigned int n) 
{ 
unsigned long int k=1; 
int j; 
for(j=1;j<=y;j++) 
k=(k*x)%n; 
return(unsigned int) k; 
} 
void main() 
{ 
char msg[100]; 
unsigned int pt[100],ct[100],n,d,e,p,q,i; 
printf("enter the plain text:"); 
scanf("%s",&msg); 
//strcpy(pt,msg); 
for(i=0;i<strlen(msg);i++) 
pt[i]=msg[i]; 
n=253;d=17;e=13; 
printf("\nCT="); 
for(i=0;i<strlen(msg);i++) 
ct[i]=mult(pt[i],e,n); 
for(i=0;i<strlen(msg);i++) 
printf("%d",ct[i]); 
printf("\nPT="); 
for(i=0;i<strlen(msg);i++) 
printf("%c",pt[i]); 
for(i=0;i<strlen(msg);i++) 
pt[i]=mult(ct[i],d,n); 
} 
 





